from rest_framework import viewsets, permissions

from crm.users.models import User
from crm.users.serializers import UserSerializer


class UserViewSet(viewsets.ModelViewSet):
    """
    ViewSet principal pour la gestion des utilisateurs.

    üìå R√®gles d'acc√®s :
    - R√¥le **GESTION** :
        ‚Üí Acc√®s complet en lecture et √©criture (CRUD complet sur tous les utilisateurs).
    - Autres r√¥les :
        ‚Üí Lecture seule de leur propre profil.
        ‚Üí Pas de cr√©ation ni de suppression.
        ‚Üí Pas d'acc√®s aux profils d'autres utilisateurs.

    üîí La logique de permissions est centralis√©e dans la classe interne `IsGestionOrSelfReadOnly`.
    """
    queryset = User.objects.all().order_by("id")
    serializer_class = UserSerializer

    def get_permissions(self):
        """
        D√©termine dynamiquement les permissions en fonction de l'action demand√©e.
        On d√©finit une permission interne sp√©cifique au `UserViewSet`.
        """

        class IsGestionOrSelfReadOnly(permissions.BasePermission):
            """
            Permission personnalis√©e :
            - Autorise un acc√®s total si l'utilisateur est GESTION.
            - Autorise la lecture de son propre profil pour les autres.
            - Bloque toute modification sauf pour GESTION.
            """

            def has_permission(self, request, view):
                """
                V√©rifie l'autorisation d'acc√®s globale √† la vue.
                """
                # GESTION ‚Üí acc√®s complet
                if request.user.is_authenticated and request.user.role == "GESTION":
                    return True

                # Autres r√¥les :
                # Autorise seulement la lecture de leur propre profil
                if view.action in ["retrieve", "list"]:
                    return request.user.is_authenticated

                # Toute autre action est refus√©e
                return False

            def has_object_permission(self, request, view, obj):
                """
                V√©rifie l'autorisation sur un objet pr√©cis (instance User).
                """
                # GESTION ‚Üí acc√®s complet
                if request.user.role == "GESTION":
                    return True

                # Autres r√¥les ‚Üí lecture uniquement de leur propre profil
                return obj == request.user and request.method in permissions.SAFE_METHODS

        # Retourne une instance de notre permission personnalis√©e
        return [IsGestionOrSelfReadOnly()]

    def get_queryset(self):
        """
        Restreint la liste des utilisateurs retourn√©e selon le r√¥le :
        - GESTION : tous les utilisateurs
        - Autres : uniquement eux-m√™mes
        """
        user = self.request.user
        if user.role == "GESTION":
            return User.objects.all()
        return User.objects.filter(pk=user.pk)